Days:
Represent as a vector<ints>. 12 months x 30 days. access like days[month * 30 + day_offset]. The "int" it is storing is
the amount of rain on that day. 0 is sunshine.

Plant:
  Basic class with print() and a few return functions. 

  grow_time int //how many days it must grow
  rain_amt int //how many inches of rain it needs
  sun_days int //how many days of sun it needs

Ga:
  The main class. Short for Genetic Algorithm, this class will do the bulk of the heavy lifting on this project. 
  "chromos" are a vector of Plant* vectors.  This allows us to store a given "farm" setup in one easy to access
  and manipulate location.

Fitness function:
  For each farm, need to need to check plant and see if it survived the growing cycle. 
  loop on days
	sum_rain = cur_day_rain + sum_rain
	if(cur_day_rain = 0)
	  sum_sun = sum_sun + 1
  If plant doesn't survive 0 score, or fractional (rain_actual/ rain_needed + sun_actual/sun_needed)?
  Each chromosome's fitness is then the sum of it's plants fitness. 

Selection:
  Rouletted wheel - higher fitness will be higher likelyhood of advancement to next generation

======
Files:

plants.txt - list of plants to read in. name, grow, rain, sun. should be seperated by whitespace. Note: the longer the grow period, the better chance of meeting the rain/sun requirements, and higher fitness levels of chromosomes.

plant.* - plant class.

ga.* - genetic algorithm class. 

main.cpp - runs the simulation.
